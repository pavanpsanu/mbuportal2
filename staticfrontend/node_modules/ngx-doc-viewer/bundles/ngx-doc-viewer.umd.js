(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-doc-viewer', ['exports', '@angular/core', '@angular/platform-browser', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['ngx-doc-viewer'] = {}, global.ng.core, global.ng.platformBrowser, global.ng.common));
}(this, (function (exports, core, platformBrowser, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var fileToArray = function (url) {
        return new Promise(function (resolve, reject) {
            try {
                var request_1 = new XMLHttpRequest();
                request_1.open('GET', url, true);
                request_1.responseType = 'blob';
                request_1.onload = function () {
                    var reader = new FileReader();
                    reader.readAsArrayBuffer(request_1.response);
                    reader.onloadend = function () {
                        resolve(reader.result);
                    };
                };
                request_1.send();
            }
            catch (_a) {
                reject("error while retrieving file " + url + ".");
            }
        });
    };
    var reloadIFrame = function (iframe) {
        if (iframe) {
            console.log('reloading..');
            // eslint-disable-next-line no-self-assign
            iframe.src = iframe.src;
        }
    };
    var ɵ0$1 = reloadIFrame;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var handleFileUpload = function (fileInput) {
        return new Promise(function (resolve, reject) {
            if (fileInput.target.files && fileInput.target.files[0]) {
                var reader = new FileReader();
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                reader.onload = function (e) {
                    resolve(e.target.result);
                };
                reader.readAsDataURL(fileInput.target.files[0]);
            }
            else {
                reject('no files selected');
            }
        });
    };
    var getbaseUrl = function () {
        var pathArray = window.location.href.split('/');
        var protocol = pathArray[0];
        var host = pathArray[2];
        return protocol + '//' + host;
    };
    var getLocation = function (href) {
        var match = href.match(/^(https?\:)\/\/(([^:\/?#]*)(?:\:([0-9]+))?)([\/]{0,1}[^?#]*)(\?[^#]*|)(#.*|)$/);
        return match && {
            href: href,
            protocol: match[1],
            host: match[2],
            hostname: match[3],
            port: match[4],
            pathname: match[5],
            search: match[6],
            hash: match[7]
        };
    };
    var getDocxToHtml = function (url) { return __awaiter(void 0, void 0, void 0, function () {
        var arrayBuffer, resultObject;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!mammoth) {
                        console.error('Please install mammoth and make sure mammoth.browser.min.js is loaded.');
                    }
                    return [4 /*yield*/, fileToArray(url)];
                case 1:
                    arrayBuffer = _c.sent();
                    return [4 /*yield*/, mammoth.convertToHtml({ arrayBuffer: arrayBuffer })];
                case 2:
                    resultObject = _c.sent();
                    return [2 /*return*/, resultObject.value];
            }
        });
    }); };
    var googleCheckSubscription = function () {
        var subscription = null;
        var checkCount = 0;
        return {
            subscribe: function (iframe, interval, maxChecks) {
                if (interval === void 0) { interval = 3000; }
                if (maxChecks === void 0) { maxChecks = 5; }
                if (!iframeIsLoaded(iframe)) {
                    subscription = setInterval(function () {
                        checkCount++;
                        if (checkCount >= maxChecks) {
                            clearInterval(subscription);
                        }
                        reloadIFrame(iframe);
                    }, interval);
                    return subscription;
                }
                else {
                    if (subscription) {
                        clearInterval(subscription);
                    }
                }
            },
            unsubscribe: function () {
                if (subscription) {
                    clearInterval(subscription);
                }
            },
        };
    };
    var iframeIsLoaded = function (iframe) {
        var _a;
        // its #document <html><head></head><body></body></html> when google is returning a 204
        // so if contentDocument = null then it's loaded.
        var isLoaded = false;
        try {
            if (!internetExplorer()) {
                isLoaded = !(iframe === null || iframe === void 0 ? void 0 : iframe.contentDocument);
            }
            else {
                isLoaded = !((_a = iframe === null || iframe === void 0 ? void 0 : iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.document);
            }
        }
        catch (_b) {
            // ignore message Blocked a frame with origin "http://..." from accessing a cross-origin frame.
        }
        return isLoaded;
    };
    var internetExplorer = function () { return (/MSIE (\d+\.\d+);/.test(navigator.userAgent) || navigator.userAgent.indexOf("Trident/") > -1); };
    var ɵ1 = internetExplorer;
    var getViewerDetails = function (url, configuredViewer, queryParams, viewerUrl) {
        if (configuredViewer === void 0) { configuredViewer = 'google'; }
        if (queryParams === void 0) { queryParams = ''; }
        if (viewerUrl === void 0) { viewerUrl = ''; }
        switch (configuredViewer) {
            case 'google':
                viewerUrl = "https://docs.google.com/gview?url=%URL%&embedded=true";
                break;
            case 'office': {
                viewerUrl = "https://view.officeapps.live.com/op/embed.aspx?src=%URL%";
                break;
            }
            case 'pdf': {
                viewerUrl = '';
                break;
            }
        }
        var externalViewer = configuredViewer === 'google' ||
            configuredViewer === 'office' ||
            configuredViewer === 'url';
        var u = (url === null || url === void 0 ? void 0 : url.indexOf('/')) ? encodeURIComponent(url) : url;
        var fullUrl = viewerUrl ? viewerUrl.replace('%URL%', u) : url;
        if (queryParams && externalViewer && configuredViewer !== 'url') {
            var start = queryParams.startsWith('&') ? '' : '&';
            fullUrl = "" + fullUrl + start + queryParams;
        }
        return {
            url: fullUrl,
            externalViewer: externalViewer,
        };
    };
    var replaceLocalUrl = function (url, overrideLocalhost) {
        var loc = getLocation(url);
        var locReplace = getLocation(overrideLocalhost);
        if (loc && locReplace) {
            return url.replace(loc.port ? loc.hostname + ":" + loc.port : loc.hostname, locReplace.port ? locReplace.hostname + ":" + locReplace.port : locReplace.hostname);
        }
        return url;
    };
    var getBlobFromUrl = function (url) {
        return new Promise(function (resolve, reject) {
            var request = new XMLHttpRequest();
            request.open('GET', url, true);
            request.responseType = 'blob';
            request.onload = function () {
                resolve(request.response);
            };
            request.onerror = reject;
            request.send();
        });
    };
    var ɵ2 = getBlobFromUrl;
    var uploadToCloud = function (fileUrl, api) { return new Promise(function (resolve, reject) {
        getBlobFromUrl(fileUrl).then(function (blob) {
            var _a, _b;
            var loc = getLocation(fileUrl);
            var name = (loc === null || loc === void 0 ? void 0 : loc.pathname) ? (_a = loc === null || loc === void 0 ? void 0 : loc.pathname) === null || _a === void 0 ? void 0 : _a.split('/')[((_b = loc === null || loc === void 0 ? void 0 : loc.pathname) === null || _b === void 0 ? void 0 : _b.split('/').length) - 1] : '';
            var formData = new FormData();
            var request = new XMLHttpRequest();
            formData.append('file', blob, name);
            request.onreadystatechange = function (e) {
                if (request.readyState === XMLHttpRequest.DONE) {
                    if (request.status === 200) {
                        resolve(request.responseText);
                    }
                    else {
                        reject(request.responseText);
                    }
                }
            };
            request.onerror = reject;
            request.open('post', api, true);
            request.send(formData);
        });
    }); };
    var isLocalFile = function (file) {
        var loc = getLocation(file);
        var hostname = (loc === null || loc === void 0 ? void 0 : loc.hostname) || '';
        return ((['localhost', '127.0.0.1', '', '::1'].includes(hostname))
            || (hostname.startsWith('192.168.'))
            || (hostname.startsWith('10.0.'))
            || (hostname.endsWith('.local')));
    };

    var NgxDocViewerComponent = /** @class */ (function () {
        function NgxDocViewerComponent(domSanitizer, ngZone) {
            this.domSanitizer = domSanitizer;
            this.ngZone = ngZone;
            this.loaded = new core.EventEmitter();
            this.url = '';
            this.queryParams = '';
            this.viewerUrl = '';
            this.googleCheckInterval = 3000;
            this.googleMaxChecks = 5;
            this.disableContent = 'none';
            this.googleCheckContentLoaded = true;
            this.fullUrl = null;
            this.externalViewer = false;
            this.docHtml = '';
            this.configuredViewer = 'google';
            this.shouldCheckIframe = false;
        }
        NgxDocViewerComponent.prototype.ngAfterViewInit = function () {
            var _a, _b;
            if (this.shouldCheckIframe) {
                var iframe = (_b = (_a = this.iframes) === null || _a === void 0 ? void 0 : _a.first) === null || _b === void 0 ? void 0 : _b.nativeElement;
                if (iframe) {
                    this.shouldCheckIframe = false;
                    this.reloadIframe(iframe);
                }
            }
        };
        NgxDocViewerComponent.prototype.ngOnDestroy = function () {
            if (this.checkIFrameSubscription) {
                this.checkIFrameSubscription.unsubscribe();
            }
        };
        NgxDocViewerComponent.prototype.ngOnChanges = function (changes) {
            return __awaiter(this, void 0, void 0, function () {
                var viewerDetails, newUrl, _c;
                var _this = this;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            if (changes &&
                                changes.viewer &&
                                (changes.viewer.isFirstChange ||
                                    changes.viewer.currentValue !== changes.viewer.previousValue)) {
                                if (this.viewer !== 'google' &&
                                    this.viewer !== 'office' &&
                                    this.viewer !== 'mammoth' &&
                                    this.viewer !== 'pdf' &&
                                    this.viewer !== 'url') {
                                    console.error("Unsupported viewer: '" + this.viewer + "'. Supported viewers: google, office, mammoth and pdf");
                                }
                                this.configuredViewer = this.viewer;
                            }
                            if (!((changes.url && changes.url.currentValue !== changes.url.previousValue) ||
                                (changes.viewer &&
                                    changes.viewer.currentValue !== changes.viewer.previousValue) ||
                                (changes.viewerUrl &&
                                    changes.viewerUrl.currentValue !== changes.viewerUrl.previousValue))) return [3 /*break*/, 4];
                            viewerDetails = getViewerDetails(this.url, this.configuredViewer, this.queryParams, this.viewerUrl);
                            this.externalViewer = viewerDetails.externalViewer;
                            if (viewerDetails.externalViewer && this.overrideLocalhost && isLocalFile(this.url)) {
                                newUrl = replaceLocalUrl(this.url, this.overrideLocalhost);
                                viewerDetails = getViewerDetails(newUrl, this.configuredViewer, this.queryParams, this.viewerUrl);
                            }
                            this.docHtml = '';
                            if (this.checkIFrameSubscription) {
                                this.checkIFrameSubscription.unsubscribe();
                            }
                            if (!!this.url) return [3 /*break*/, 1];
                            this.fullUrl = null;
                            return [3 /*break*/, 4];
                        case 1:
                            if (!(viewerDetails.externalViewer ||
                                this.configuredViewer === 'url')) return [3 /*break*/, 2];
                            this.fullUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(viewerDetails.url);
                            // see:
                            // https://stackoverflow.com/questions/40414039/google-docs-viewer-returning-204-responses-no-longer-working-alternatives
                            // hack to reload iframe if it's not loaded.
                            // would maybe be better to use view.officeapps.live.com but seems not to work with sas token.
                            if (this.configuredViewer === 'google' &&
                                this.googleCheckContentLoaded) {
                                this.ngZone.runOutsideAngular(function () {
                                    var _a, _b;
                                    // if it's not loaded after the googleIntervalCheck, then open load again.
                                    var iframe = (_b = (_a = _this.iframes) === null || _a === void 0 ? void 0 : _a.first) === null || _b === void 0 ? void 0 : _b.nativeElement;
                                    if (iframe) {
                                        _this.reloadIframe(iframe);
                                    }
                                    else {
                                        _this.shouldCheckIframe = true;
                                    }
                                });
                            }
                            return [3 /*break*/, 4];
                        case 2:
                            if (!(this.configuredViewer === 'mammoth')) return [3 /*break*/, 4];
                            _c = this;
                            return [4 /*yield*/, getDocxToHtml(this.url)];
                        case 3:
                            _c.docHtml = _d.sent();
                            _d.label = 4;
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        NgxDocViewerComponent.prototype.reloadIframe = function (iframe) {
            this.checkIFrameSubscription = googleCheckSubscription();
            this.checkIFrameSubscription.subscribe(iframe, this.googleCheckInterval, this.googleMaxChecks);
        };
        NgxDocViewerComponent.prototype.iframeLoaded = function () {
            var _a, _b;
            var iframe = (_b = (_a = this.iframes) === null || _a === void 0 ? void 0 : _a.first) === null || _b === void 0 ? void 0 : _b.nativeElement;
            if (iframe && iframeIsLoaded(iframe)) {
                this.loaded.emit(null);
                if (this.checkIFrameSubscription) {
                    this.checkIFrameSubscription.unsubscribe();
                }
            }
        };
        return NgxDocViewerComponent;
    }());
    NgxDocViewerComponent.decorators = [
        { type: core.Component, args: [{
                    // eslint-disable-next-line @angular-eslint/component-selector
                    selector: 'ngx-doc-viewer',
                    template: "<ng-container *ngIf=\"!externalViewer\">\r\n  <div *ngIf=\"configuredViewer !== 'pdf'\" [innerHtml]=\"docHtml\"></div>\r\n  <object\r\n    *ngIf=\"fullUrl && configuredViewer === 'pdf'\"\r\n    [data]=\"fullUrl\"\r\n    type=\"application/pdf\"\r\n    width=\"100%\"\r\n    height=\"100%\"\r\n  >\r\n    <p>\r\n      Your browser does not support PDFs.\r\n      <a [href]=\"fullUrl\">Download the PDF</a>.\r\n    </p>\r\n  </object>\r\n</ng-container>\r\n<ng-container *ngIf=\"externalViewer\">\r\n  <iframe\r\n    (load)=\"iframeLoaded()\"\r\n    *ngIf=\"fullUrl && disableContent === 'none'\"\r\n    #iframe\r\n    id=\"iframe-doc-viewer\"\r\n    frameBorder=\"0\"\r\n    [src]=\"fullUrl\"\r\n  ></iframe>\r\n  <div class=\"container\" *ngIf=\"disableContent !== 'none'\">\r\n    <div\r\n      [class.overlay-full]=\"disableContent === 'all'\"\r\n      [class.overlay-popout-google]=\"\r\n        configuredViewer === 'google' &&\r\n        (disableContent === 'popout' || disableContent === 'popout-hide')\r\n      \"\r\n      [class.overlay-popout-office]=\"\r\n        configuredViewer === 'office' &&\r\n        (disableContent === 'popout' || disableContent === 'popout-hide')\r\n      \"\r\n      [style.background-color]=\"\r\n        disableContent === 'popout-hide' ? '#fff' : 'transparent'\r\n      \"\r\n    ></div>\r\n    <iframe\r\n      (load)=\"iframeLoaded()\"\r\n      *ngIf=\"fullUrl\"\r\n      #iframe\r\n      id=\"iframe\"\r\n      frameBorder=\"0\"\r\n      [src]=\"fullUrl\"\r\n    ></iframe>\r\n  </div>\r\n</ng-container>\r\n",
                    styles: ["\n      :host {\n        display: block;\n      }\n      .container {\n        width: 100%;\n        height: 100%;\n        position: relative;\n      }\n      .overlay-popout-google {\n        width: 40px;\n        height: 40px;\n        right: 26px;\n        top: 11.5px;\n        position: absolute;\n        z-index: 1000;\n      }\n      .overlay-popout-office {\n        width: 100px;\n        height: 20px;\n        right: 0;\n        bottom: 0;\n        position: absolute;\n        z-index: 1000;\n      }\n      .overlay-full {\n        width: 100%;\n        height: 100%;\n        right: 0;\n        top: 0;\n        position: absolute;\n        z-index: 1000;\n      }\n      iframe {\n        width: 100%;\n        height: 100%;\n      }\n    "]
                },] }
    ];
    NgxDocViewerComponent.ctorParameters = function () { return [
        { type: platformBrowser.DomSanitizer },
        { type: core.NgZone }
    ]; };
    NgxDocViewerComponent.propDecorators = {
        loaded: [{ type: core.Output }],
        url: [{ type: core.Input }],
        queryParams: [{ type: core.Input }],
        viewerUrl: [{ type: core.Input }],
        googleCheckInterval: [{ type: core.Input }],
        googleMaxChecks: [{ type: core.Input }],
        disableContent: [{ type: core.Input }],
        googleCheckContentLoaded: [{ type: core.Input }],
        viewer: [{ type: core.Input }],
        overrideLocalhost: [{ type: core.Input }],
        iframes: [{ type: core.ViewChildren, args: ['iframe',] }]
    };

    var NgxDocViewerModule = /** @class */ (function () {
        function NgxDocViewerModule() {
        }
        return NgxDocViewerModule;
    }());
    NgxDocViewerModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [NgxDocViewerComponent],
                    exports: [NgxDocViewerComponent],
                },] }
    ];

    var ɵ0 = function () { };
    var defaultProps = {
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        loaded: ɵ0,
        disableContent: 'none',
        googleCheckContentLoaded: true,
        googleCheckInterval: 3000,
        queryParams: '',
        url: '',
        viewer: 'google',
        viewerUrl: '',
    };

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NgxDocViewerComponent = NgxDocViewerComponent;
    exports.NgxDocViewerModule = NgxDocViewerModule;
    exports.defaultProps = defaultProps;
    exports.fileToArray = fileToArray;
    exports.getDocxToHtml = getDocxToHtml;
    exports.getLocation = getLocation;
    exports.getViewerDetails = getViewerDetails;
    exports.getbaseUrl = getbaseUrl;
    exports.googleCheckSubscription = googleCheckSubscription;
    exports.handleFileUpload = handleFileUpload;
    exports.iframeIsLoaded = iframeIsLoaded;
    exports.isLocalFile = isLocalFile;
    exports.replaceLocalUrl = replaceLocalUrl;
    exports.uploadToCloud = uploadToCloud;
    exports.ɵ1 = ɵ1;
    exports.ɵ2 = ɵ2;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-doc-viewer.umd.js.map

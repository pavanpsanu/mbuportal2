{"ast":null,"code":"import _classCallCheck from \"C:/Users/testusr/Pictures/new portal clone/static frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/testusr/Pictures/new portal clone/static frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _regeneratorRuntime from \"C:/Users/testusr/Pictures/new portal clone/static frontend/node_modules/@babel/runtime/regenerator\";\nimport { __awaiter } from 'tslib';\nimport { EventEmitter, Component, NgZone, Output, Input, ViewChildren, NgModule } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/platform-browser';\nimport * as ɵngcc2 from '@angular/common';\nvar _c0 = [\"iframe\"];\n\nfunction NgxDocViewerComponent_ng_container_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 3);\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"innerHtml\", ctx_r2.docHtml, ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction NgxDocViewerComponent_ng_container_0_object_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"object\", 4);\n    ɵngcc0.ɵɵelementStart(1, \"p\");\n    ɵngcc0.ɵɵtext(2, \" Your browser does not support PDFs. \");\n    ɵngcc0.ɵɵelementStart(3, \"a\", 5);\n    ɵngcc0.ɵɵtext(4, \"Download the PDF\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(5, \". \");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"data\", ctx_r3.fullUrl, ɵngcc0.ɵɵsanitizeResourceUrl);\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵproperty(\"href\", ctx_r3.fullUrl, ɵngcc0.ɵɵsanitizeUrl);\n  }\n}\n\nfunction NgxDocViewerComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NgxDocViewerComponent_ng_container_0_div_1_Template, 1, 1, \"div\", 1);\n    ɵngcc0.ɵɵtemplate(2, NgxDocViewerComponent_ng_container_0_object_2_Template, 6, 2, \"object\", 2);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.configuredViewer !== \"pdf\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.fullUrl && ctx_r0.configuredViewer === \"pdf\");\n  }\n}\n\nfunction NgxDocViewerComponent_ng_container_1_iframe_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r8 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"iframe\", 8, 9);\n    ɵngcc0.ɵɵlistener(\"load\", function NgxDocViewerComponent_ng_container_1_iframe_1_Template_iframe_load_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      var ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r7.iframeLoaded();\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"src\", ctx_r4.fullUrl, ɵngcc0.ɵɵsanitizeResourceUrl);\n  }\n}\n\nfunction NgxDocViewerComponent_ng_container_1_div_2_iframe_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r12 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"iframe\", 12, 9);\n    ɵngcc0.ɵɵlistener(\"load\", function NgxDocViewerComponent_ng_container_1_div_2_iframe_2_Template_iframe_load_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      var ctx_r11 = ɵngcc0.ɵɵnextContext(3);\n      return ctx_r11.iframeLoaded();\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r9 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵproperty(\"src\", ctx_r9.fullUrl, ɵngcc0.ɵɵsanitizeResourceUrl);\n  }\n}\n\nfunction NgxDocViewerComponent_ng_container_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 10);\n    ɵngcc0.ɵɵelement(1, \"div\");\n    ɵngcc0.ɵɵtemplate(2, NgxDocViewerComponent_ng_container_1_div_2_iframe_2_Template, 2, 1, \"iframe\", 11);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"background-color\", ctx_r5.disableContent === \"popout-hide\" ? \"#fff\" : \"transparent\");\n    ɵngcc0.ɵɵclassProp(\"overlay-full\", ctx_r5.disableContent === \"all\")(\"overlay-popout-google\", ctx_r5.configuredViewer === \"google\" && (ctx_r5.disableContent === \"popout\" || ctx_r5.disableContent === \"popout-hide\"))(\"overlay-popout-office\", ctx_r5.configuredViewer === \"office\" && (ctx_r5.disableContent === \"popout\" || ctx_r5.disableContent === \"popout-hide\"));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r5.fullUrl);\n  }\n}\n\nfunction NgxDocViewerComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NgxDocViewerComponent_ng_container_1_iframe_1_Template, 2, 1, \"iframe\", 6);\n    ɵngcc0.ɵɵtemplate(2, NgxDocViewerComponent_ng_container_1_div_2_Template, 3, 9, \"div\", 7);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.fullUrl && ctx_r1.disableContent === \"none\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.disableContent !== \"none\");\n  }\n}\n\nvar fileToArray = function fileToArray(url) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var request = new XMLHttpRequest();\n      request.open('GET', url, true);\n      request.responseType = 'blob';\n\n      request.onload = function () {\n        var reader = new FileReader();\n        reader.readAsArrayBuffer(request.response);\n\n        reader.onloadend = function () {\n          resolve(reader.result);\n        };\n      };\n\n      request.send();\n    } catch (_a) {\n      reject(\"error while retrieving file \".concat(url, \".\"));\n    }\n  });\n};\n\nvar reloadIFrame = function reloadIFrame(iframe) {\n  if (iframe) {\n    console.log('reloading..'); // eslint-disable-next-line no-self-assign\n\n    iframe.src = iframe.src;\n  }\n};\n\nvar ɵ0$1 = reloadIFrame; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nvar handleFileUpload = function handleFileUpload(fileInput) {\n  return new Promise(function (resolve, reject) {\n    if (fileInput.target.files && fileInput.target.files[0]) {\n      var reader = new FileReader(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      reader.onload = function (e) {\n        resolve(e.target.result);\n      };\n\n      reader.readAsDataURL(fileInput.target.files[0]);\n    } else {\n      reject('no files selected');\n    }\n  });\n};\n\nvar getbaseUrl = function getbaseUrl() {\n  var pathArray = window.location.href.split('/');\n  var protocol = pathArray[0];\n  var host = pathArray[2];\n  return protocol + '//' + host;\n};\n\nvar getLocation = function getLocation(href) {\n  var match = href.match(/^(https?\\:)\\/\\/(([^:\\/?#]*)(?:\\:([0-9]+))?)([\\/]{0,1}[^?#]*)(\\?[^#]*|)(#.*|)$/);\n  return match && {\n    href: href,\n    protocol: match[1],\n    host: match[2],\n    hostname: match[3],\n    port: match[4],\n    pathname: match[5],\n    search: match[6],\n    hash: match[7]\n  };\n};\n\nvar getDocxToHtml = function getDocxToHtml(url) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var arrayBuffer, resultObject;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!mammoth) {\n              console.error('Please install mammoth and make sure mammoth.browser.min.js is loaded.');\n            }\n\n            _context.next = 3;\n            return fileToArray(url);\n\n          case 3:\n            arrayBuffer = _context.sent;\n            _context.next = 6;\n            return mammoth.convertToHtml({\n              arrayBuffer: arrayBuffer\n            });\n\n          case 6:\n            resultObject = _context.sent;\n            return _context.abrupt(\"return\", resultObject.value);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n};\n\nvar googleCheckSubscription = function googleCheckSubscription() {\n  var subscription = null;\n  var checkCount = 0;\n  return {\n    subscribe: function subscribe(iframe) {\n      var interval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3000;\n      var maxChecks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;\n\n      if (!iframeIsLoaded(iframe)) {\n        subscription = setInterval(function () {\n          checkCount++;\n\n          if (checkCount >= maxChecks) {\n            clearInterval(subscription);\n          }\n\n          reloadIFrame(iframe);\n        }, interval);\n        return subscription;\n      } else {\n        if (subscription) {\n          clearInterval(subscription);\n        }\n      }\n    },\n    unsubscribe: function unsubscribe() {\n      if (subscription) {\n        clearInterval(subscription);\n      }\n    }\n  };\n};\n\nvar iframeIsLoaded = function iframeIsLoaded(iframe) {\n  var _a; // its #document <html><head></head><body></body></html> when google is returning a 204\n  // so if contentDocument = null then it's loaded.\n\n\n  var isLoaded = false;\n\n  try {\n    if (!internetExplorer()) {\n      isLoaded = !(iframe === null || iframe === void 0 ? void 0 : iframe.contentDocument);\n    } else {\n      isLoaded = !((_a = iframe === null || iframe === void 0 ? void 0 : iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.document);\n    }\n  } catch (_b) {// ignore message Blocked a frame with origin \"http://...\" from accessing a cross-origin frame.\n  }\n\n  return isLoaded;\n};\n\nvar internetExplorer = function internetExplorer() {\n  return /MSIE (\\d+\\.\\d+);/.test(navigator.userAgent) || navigator.userAgent.indexOf(\"Trident/\") > -1;\n};\n\nvar ɵ1 = internetExplorer;\n\nvar getViewerDetails = function getViewerDetails(url) {\n  var configuredViewer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'google';\n  var queryParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var viewerUrl = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n\n  switch (configuredViewer) {\n    case 'google':\n      viewerUrl = \"https://docs.google.com/gview?url=%URL%&embedded=true\";\n      break;\n\n    case 'office':\n      {\n        viewerUrl = \"https://view.officeapps.live.com/op/embed.aspx?src=%URL%\";\n        break;\n      }\n\n    case 'pdf':\n      {\n        viewerUrl = '';\n        break;\n      }\n  }\n\n  var externalViewer = configuredViewer === 'google' || configuredViewer === 'office' || configuredViewer === 'url';\n  var u = (url === null || url === void 0 ? void 0 : url.indexOf('/')) ? encodeURIComponent(url) : url;\n  var fullUrl = viewerUrl ? viewerUrl.replace('%URL%', u) : url;\n\n  if (queryParams && externalViewer && configuredViewer !== 'url') {\n    var start = queryParams.startsWith('&') ? '' : '&';\n    fullUrl = \"\".concat(fullUrl).concat(start).concat(queryParams);\n  }\n\n  return {\n    url: fullUrl,\n    externalViewer: externalViewer\n  };\n};\n\nvar replaceLocalUrl = function replaceLocalUrl(url, overrideLocalhost) {\n  var loc = getLocation(url);\n  var locReplace = getLocation(overrideLocalhost);\n\n  if (loc && locReplace) {\n    return url.replace(loc.port ? \"\".concat(loc.hostname, \":\").concat(loc.port) : loc.hostname, locReplace.port ? \"\".concat(locReplace.hostname, \":\").concat(locReplace.port) : locReplace.hostname);\n  }\n\n  return url;\n};\n\nvar getBlobFromUrl = function getBlobFromUrl(url) {\n  return new Promise(function (resolve, reject) {\n    var request = new XMLHttpRequest();\n    request.open('GET', url, true);\n    request.responseType = 'blob';\n\n    request.onload = function () {\n      resolve(request.response);\n    };\n\n    request.onerror = reject;\n    request.send();\n  });\n};\n\nvar ɵ2 = getBlobFromUrl;\n\nvar uploadToCloud = function uploadToCloud(fileUrl, api) {\n  return new Promise(function (resolve, reject) {\n    getBlobFromUrl(fileUrl).then(function (blob) {\n      var _a, _b;\n\n      var loc = getLocation(fileUrl);\n      var name = (loc === null || loc === void 0 ? void 0 : loc.pathname) ? (_a = loc === null || loc === void 0 ? void 0 : loc.pathname) === null || _a === void 0 ? void 0 : _a.split('/')[((_b = loc === null || loc === void 0 ? void 0 : loc.pathname) === null || _b === void 0 ? void 0 : _b.split('/').length) - 1] : '';\n      var formData = new FormData();\n      var request = new XMLHttpRequest();\n      formData.append('file', blob, name);\n\n      request.onreadystatechange = function (e) {\n        if (request.readyState === XMLHttpRequest.DONE) {\n          if (request.status === 200) {\n            resolve(request.responseText);\n          } else {\n            reject(request.responseText);\n          }\n        }\n      };\n\n      request.onerror = reject;\n      request.open('post', api, true);\n      request.send(formData);\n    });\n  });\n};\n\nvar isLocalFile = function isLocalFile(file) {\n  var loc = getLocation(file);\n  var hostname = (loc === null || loc === void 0 ? void 0 : loc.hostname) || '';\n  return ['localhost', '127.0.0.1', '', '::1'].includes(hostname) || hostname.startsWith('192.168.') || hostname.startsWith('10.0.') || hostname.endsWith('.local');\n};\n\nvar NgxDocViewerComponent = /*#__PURE__*/function () {\n  function NgxDocViewerComponent(domSanitizer, ngZone) {\n    _classCallCheck(this, NgxDocViewerComponent);\n\n    this.domSanitizer = domSanitizer;\n    this.ngZone = ngZone;\n    this.loaded = new EventEmitter();\n    this.url = '';\n    this.queryParams = '';\n    this.viewerUrl = '';\n    this.googleCheckInterval = 3000;\n    this.googleMaxChecks = 5;\n    this.disableContent = 'none';\n    this.googleCheckContentLoaded = true;\n    this.fullUrl = null;\n    this.externalViewer = false;\n    this.docHtml = '';\n    this.configuredViewer = 'google';\n    this.shouldCheckIframe = false;\n  }\n\n  _createClass(NgxDocViewerComponent, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _a, _b;\n\n      if (this.shouldCheckIframe) {\n        var iframe = (_b = (_a = this.iframes) === null || _a === void 0 ? void 0 : _a.first) === null || _b === void 0 ? void 0 : _b.nativeElement;\n\n        if (iframe) {\n          this.shouldCheckIframe = false;\n          this.reloadIframe(iframe);\n        }\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.checkIFrameSubscription) {\n        this.checkIFrameSubscription.unsubscribe();\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this = this;\n\n        var viewerDetails, newUrl;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (changes && changes.viewer && (changes.viewer.isFirstChange || changes.viewer.currentValue !== changes.viewer.previousValue)) {\n                  if (this.viewer !== 'google' && this.viewer !== 'office' && this.viewer !== 'mammoth' && this.viewer !== 'pdf' && this.viewer !== 'url') {\n                    console.error(\"Unsupported viewer: '\".concat(this.viewer, \"'. Supported viewers: google, office, mammoth and pdf\"));\n                  }\n\n                  this.configuredViewer = this.viewer;\n                }\n\n                if (!(changes.url && changes.url.currentValue !== changes.url.previousValue || changes.viewer && changes.viewer.currentValue !== changes.viewer.previousValue || changes.viewerUrl && changes.viewerUrl.currentValue !== changes.viewerUrl.previousValue)) {\n                  _context2.next = 20;\n                  break;\n                }\n\n                viewerDetails = getViewerDetails(this.url, this.configuredViewer, this.queryParams, this.viewerUrl);\n                this.externalViewer = viewerDetails.externalViewer;\n\n                if (viewerDetails.externalViewer && this.overrideLocalhost && isLocalFile(this.url)) {\n                  newUrl = replaceLocalUrl(this.url, this.overrideLocalhost);\n                  viewerDetails = getViewerDetails(newUrl, this.configuredViewer, this.queryParams, this.viewerUrl);\n                }\n\n                this.docHtml = '';\n\n                if (this.checkIFrameSubscription) {\n                  this.checkIFrameSubscription.unsubscribe();\n                }\n\n                if (this.url) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                this.fullUrl = null;\n                _context2.next = 20;\n                break;\n\n              case 11:\n                if (!(viewerDetails.externalViewer || this.configuredViewer === 'url')) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                this.fullUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(viewerDetails.url); // see:\n                // https://stackoverflow.com/questions/40414039/google-docs-viewer-returning-204-responses-no-longer-working-alternatives\n                // hack to reload iframe if it's not loaded.\n                // would maybe be better to use view.officeapps.live.com but seems not to work with sas token.\n\n                if (this.configuredViewer === 'google' && this.googleCheckContentLoaded) {\n                  this.ngZone.runOutsideAngular(function () {\n                    var _a, _b; // if it's not loaded after the googleIntervalCheck, then open load again.\n\n\n                    var iframe = (_b = (_a = _this.iframes) === null || _a === void 0 ? void 0 : _a.first) === null || _b === void 0 ? void 0 : _b.nativeElement;\n\n                    if (iframe) {\n                      _this.reloadIframe(iframe);\n                    } else {\n                      _this.shouldCheckIframe = true;\n                    }\n                  });\n                }\n\n                _context2.next = 20;\n                break;\n\n              case 16:\n                if (!(this.configuredViewer === 'mammoth')) {\n                  _context2.next = 20;\n                  break;\n                }\n\n                _context2.next = 19;\n                return getDocxToHtml(this.url);\n\n              case 19:\n                this.docHtml = _context2.sent;\n\n              case 20:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"reloadIframe\",\n    value: function reloadIframe(iframe) {\n      this.checkIFrameSubscription = googleCheckSubscription();\n      this.checkIFrameSubscription.subscribe(iframe, this.googleCheckInterval, this.googleMaxChecks);\n    }\n  }, {\n    key: \"iframeLoaded\",\n    value: function iframeLoaded() {\n      var _a, _b;\n\n      var iframe = (_b = (_a = this.iframes) === null || _a === void 0 ? void 0 : _a.first) === null || _b === void 0 ? void 0 : _b.nativeElement;\n\n      if (iframe && iframeIsLoaded(iframe)) {\n        this.loaded.emit(null);\n\n        if (this.checkIFrameSubscription) {\n          this.checkIFrameSubscription.unsubscribe();\n        }\n      }\n    }\n  }]);\n\n  return NgxDocViewerComponent;\n}();\n\nNgxDocViewerComponent.ɵfac = function NgxDocViewerComponent_Factory(t) {\n  return new (t || NgxDocViewerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nNgxDocViewerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NgxDocViewerComponent,\n  selectors: [[\"ngx-doc-viewer\"]],\n  viewQuery: function NgxDocViewerComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.iframes = _t);\n    }\n  },\n  inputs: {\n    url: \"url\",\n    queryParams: \"queryParams\",\n    viewerUrl: \"viewerUrl\",\n    googleCheckInterval: \"googleCheckInterval\",\n    googleMaxChecks: \"googleMaxChecks\",\n    disableContent: \"disableContent\",\n    googleCheckContentLoaded: \"googleCheckContentLoaded\",\n    viewer: \"viewer\",\n    overrideLocalhost: \"overrideLocalhost\"\n  },\n  outputs: {\n    loaded: \"loaded\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 2,\n  consts: [[4, \"ngIf\"], [3, \"innerHtml\", 4, \"ngIf\"], [\"type\", \"application/pdf\", \"width\", \"100%\", \"height\", \"100%\", 3, \"data\", 4, \"ngIf\"], [3, \"innerHtml\"], [\"type\", \"application/pdf\", \"width\", \"100%\", \"height\", \"100%\", 3, \"data\"], [3, \"href\"], [\"id\", \"iframe-doc-viewer\", \"frameBorder\", \"0\", 3, \"src\", \"load\", 4, \"ngIf\"], [\"class\", \"container\", 4, \"ngIf\"], [\"id\", \"iframe-doc-viewer\", \"frameBorder\", \"0\", 3, \"src\", \"load\"], [\"iframe\", \"\"], [1, \"container\"], [\"id\", \"iframe\", \"frameBorder\", \"0\", 3, \"src\", \"load\", 4, \"ngIf\"], [\"id\", \"iframe\", \"frameBorder\", \"0\", 3, \"src\", \"load\"]],\n  template: function NgxDocViewerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, NgxDocViewerComponent_ng_container_0_Template, 3, 2, \"ng-container\", 0);\n      ɵngcc0.ɵɵtemplate(1, NgxDocViewerComponent_ng_container_1_Template, 3, 2, \"ng-container\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.externalViewer);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.externalViewer);\n    }\n  },\n  directives: [ɵngcc2.NgIf],\n  styles: [\"[_nghost-%COMP%] {\\n        display: block;\\n      }\\n      .container[_ngcontent-%COMP%] {\\n        width: 100%;\\n        height: 100%;\\n        position: relative;\\n      }\\n      .overlay-popout-google[_ngcontent-%COMP%] {\\n        width: 40px;\\n        height: 40px;\\n        right: 26px;\\n        top: 11.5px;\\n        position: absolute;\\n        z-index: 1000;\\n      }\\n      .overlay-popout-office[_ngcontent-%COMP%] {\\n        width: 100px;\\n        height: 20px;\\n        right: 0;\\n        bottom: 0;\\n        position: absolute;\\n        z-index: 1000;\\n      }\\n      .overlay-full[_ngcontent-%COMP%] {\\n        width: 100%;\\n        height: 100%;\\n        right: 0;\\n        top: 0;\\n        position: absolute;\\n        z-index: 1000;\\n      }\\n      iframe[_ngcontent-%COMP%] {\\n        width: 100%;\\n        height: 100%;\\n      }\"]\n});\n\nNgxDocViewerComponent.ctorParameters = function () {\n  return [{\n    type: DomSanitizer\n  }, {\n    type: NgZone\n  }];\n};\n\nNgxDocViewerComponent.propDecorators = {\n  loaded: [{\n    type: Output\n  }],\n  url: [{\n    type: Input\n  }],\n  queryParams: [{\n    type: Input\n  }],\n  viewerUrl: [{\n    type: Input\n  }],\n  googleCheckInterval: [{\n    type: Input\n  }],\n  googleMaxChecks: [{\n    type: Input\n  }],\n  disableContent: [{\n    type: Input\n  }],\n  googleCheckContentLoaded: [{\n    type: Input\n  }],\n  viewer: [{\n    type: Input\n  }],\n  overrideLocalhost: [{\n    type: Input\n  }],\n  iframes: [{\n    type: ViewChildren,\n    args: ['iframe']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgxDocViewerComponent, [{\n    type: Component,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/component-selector\n      selector: 'ngx-doc-viewer',\n      template: \"<ng-container *ngIf=\\\"!externalViewer\\\">\\r\\n  <div *ngIf=\\\"configuredViewer !== 'pdf'\\\" [innerHtml]=\\\"docHtml\\\"></div>\\r\\n  <object\\r\\n    *ngIf=\\\"fullUrl && configuredViewer === 'pdf'\\\"\\r\\n    [data]=\\\"fullUrl\\\"\\r\\n    type=\\\"application/pdf\\\"\\r\\n    width=\\\"100%\\\"\\r\\n    height=\\\"100%\\\"\\r\\n  >\\r\\n    <p>\\r\\n      Your browser does not support PDFs.\\r\\n      <a [href]=\\\"fullUrl\\\">Download the PDF</a>.\\r\\n    </p>\\r\\n  </object>\\r\\n</ng-container>\\r\\n<ng-container *ngIf=\\\"externalViewer\\\">\\r\\n  <iframe\\r\\n    (load)=\\\"iframeLoaded()\\\"\\r\\n    *ngIf=\\\"fullUrl && disableContent === 'none'\\\"\\r\\n    #iframe\\r\\n    id=\\\"iframe-doc-viewer\\\"\\r\\n    frameBorder=\\\"0\\\"\\r\\n    [src]=\\\"fullUrl\\\"\\r\\n  ></iframe>\\r\\n  <div class=\\\"container\\\" *ngIf=\\\"disableContent !== 'none'\\\">\\r\\n    <div\\r\\n      [class.overlay-full]=\\\"disableContent === 'all'\\\"\\r\\n      [class.overlay-popout-google]=\\\"\\r\\n        configuredViewer === 'google' &&\\r\\n        (disableContent === 'popout' || disableContent === 'popout-hide')\\r\\n      \\\"\\r\\n      [class.overlay-popout-office]=\\\"\\r\\n        configuredViewer === 'office' &&\\r\\n        (disableContent === 'popout' || disableContent === 'popout-hide')\\r\\n      \\\"\\r\\n      [style.background-color]=\\\"\\r\\n        disableContent === 'popout-hide' ? '#fff' : 'transparent'\\r\\n      \\\"\\r\\n    ></div>\\r\\n    <iframe\\r\\n      (load)=\\\"iframeLoaded()\\\"\\r\\n      *ngIf=\\\"fullUrl\\\"\\r\\n      #iframe\\r\\n      id=\\\"iframe\\\"\\r\\n      frameBorder=\\\"0\\\"\\r\\n      [src]=\\\"fullUrl\\\"\\r\\n    ></iframe>\\r\\n  </div>\\r\\n</ng-container>\\r\\n\",\n      styles: [\"\\n      :host {\\n        display: block;\\n      }\\n      .container {\\n        width: 100%;\\n        height: 100%;\\n        position: relative;\\n      }\\n      .overlay-popout-google {\\n        width: 40px;\\n        height: 40px;\\n        right: 26px;\\n        top: 11.5px;\\n        position: absolute;\\n        z-index: 1000;\\n      }\\n      .overlay-popout-office {\\n        width: 100px;\\n        height: 20px;\\n        right: 0;\\n        bottom: 0;\\n        position: absolute;\\n        z-index: 1000;\\n      }\\n      .overlay-full {\\n        width: 100%;\\n        height: 100%;\\n        right: 0;\\n        top: 0;\\n        position: absolute;\\n        z-index: 1000;\\n      }\\n      iframe {\\n        width: 100%;\\n        height: 100%;\\n      }\\n    \"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.DomSanitizer\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    loaded: [{\n      type: Output\n    }],\n    url: [{\n      type: Input\n    }],\n    queryParams: [{\n      type: Input\n    }],\n    viewerUrl: [{\n      type: Input\n    }],\n    googleCheckInterval: [{\n      type: Input\n    }],\n    googleMaxChecks: [{\n      type: Input\n    }],\n    disableContent: [{\n      type: Input\n    }],\n    googleCheckContentLoaded: [{\n      type: Input\n    }],\n    viewer: [{\n      type: Input\n    }],\n    overrideLocalhost: [{\n      type: Input\n    }],\n    iframes: [{\n      type: ViewChildren,\n      args: ['iframe']\n    }]\n  });\n})();\n\nvar NgxDocViewerModule = function NgxDocViewerModule() {\n  _classCallCheck(this, NgxDocViewerModule);\n};\n\nNgxDocViewerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NgxDocViewerModule\n});\nNgxDocViewerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NgxDocViewerModule_Factory(t) {\n    return new (t || NgxDocViewerModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxDocViewerModule, {\n    declarations: function declarations() {\n      return [NgxDocViewerComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [NgxDocViewerComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgxDocViewerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [NgxDocViewerComponent],\n      exports: [NgxDocViewerComponent]\n    }]\n  }], null, null);\n})();\n\nvar ɵ0 = function ɵ0() {};\n\nvar defaultProps = {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  loaded: ɵ0,\n  disableContent: 'none',\n  googleCheckContentLoaded: true,\n  googleCheckInterval: 3000,\n  queryParams: '',\n  url: '',\n  viewer: 'google',\n  viewerUrl: ''\n};\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxDocViewerComponent, NgxDocViewerModule, defaultProps, fileToArray, getDocxToHtml, getLocation, getViewerDetails, getbaseUrl, googleCheckSubscription, handleFileUpload, iframeIsLoaded, isLocalFile, replaceLocalUrl, uploadToCloud, ɵ1, ɵ2 };","map":{"version":3,"sources":["../../../../libs/helper.ts","../../../../libs/ngx-doc-viewer/src/lib/document-viewer.component.ts","../../../../libs/ngx-doc-viewer/src/lib/document-viewer.module.ts","../../../../libs/model.ts","../../../../libs/ngx-doc-viewer.ts"],"names":[],"mappings":"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","sourcesContent":["// eslint-disable-next-line no-var\r\ndeclare var mammoth: any;\r\nimport { IFrameReloader, ViewerType } from './model';\r\n\r\nexport const fileToArray = (url: string): Promise<ArrayBuffer> => {\r\n  return new Promise<ArrayBuffer>((resolve, reject) => {\r\n    try {\r\n      const request = new XMLHttpRequest();\r\n      request.open('GET', url, true);\r\n      request.responseType = 'blob';\r\n      request.onload = () => {\r\n        const reader = new FileReader();\r\n        reader.readAsArrayBuffer(request.response);\r\n        reader.onloadend = () => {\r\n          resolve(reader.result as ArrayBuffer);\r\n        };\r\n      };\r\n      request.send();\r\n    } catch {\r\n      reject(`error while retrieving file ${url}.`);\r\n    }\r\n  });\r\n};\r\n\r\nconst reloadIFrame = (iframe: HTMLIFrameElement) => {\r\n  if (iframe) {\r\n    console.log('reloading..');\r\n    // eslint-disable-next-line no-self-assign\r\n    iframe.src = iframe.src;\r\n  }\r\n};\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport const handleFileUpload = (fileInput: any) => {\r\n  return new Promise<string>((resolve, reject) => {\r\n    if (fileInput.target.files && fileInput.target.files[0]) {\r\n      const reader = new FileReader();\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      reader.onload = (e: any) => {\r\n        resolve(e.target.result);\r\n      };\r\n      reader.readAsDataURL(fileInput.target.files[0]);\r\n    } else {\r\n      reject('no files selected');\r\n    }\r\n  });\r\n};\r\n\r\nexport const getbaseUrl = (): string => {\r\n  const pathArray = window.location.href.split('/');\r\n  const protocol = pathArray[0];\r\n  const host = pathArray[2];\r\n  return protocol + '//' + host;\r\n};\r\n\r\n\r\nexport const getLocation = (href: string) => {\r\n  const match = href.match(/^(https?\\:)\\/\\/(([^:\\/?#]*)(?:\\:([0-9]+))?)([\\/]{0,1}[^?#]*)(\\?[^#]*|)(#.*|)$/);\r\n  return match && {\r\n    href,\r\n    protocol: match[1],\r\n    host: match[2],\r\n    hostname: match[3],\r\n    port: match[4],\r\n    pathname: match[5],\r\n    search: match[6],\r\n    hash: match[7]\r\n  }\r\n}\r\n\r\nexport const getDocxToHtml = async (url: string) => {\r\n  if (!mammoth) {\r\n    console.error(\r\n      'Please install mammoth and make sure mammoth.browser.min.js is loaded.'\r\n    );\r\n  }\r\n  const arrayBuffer = await fileToArray(url);\r\n  const resultObject = await mammoth.convertToHtml({ arrayBuffer });\r\n  return resultObject.value;\r\n};\r\n\r\nexport const googleCheckSubscription = (): IFrameReloader => {\r\n  let subscription: any = null;\r\n  let checkCount = 0;\r\n  return {\r\n    subscribe: (iframe: HTMLIFrameElement, interval = 3000, maxChecks = 5) => {\r\n      if (!iframeIsLoaded(iframe)) {\r\n        subscription = setInterval(() => {\r\n          checkCount++;\r\n          if (checkCount >= maxChecks) {\r\n            clearInterval(subscription);\r\n          }\r\n          reloadIFrame(iframe);\r\n        }, interval);\r\n        return subscription;\r\n      } else {\r\n        if (subscription) {\r\n          clearInterval(subscription);\r\n        }\r\n      }\r\n    },\r\n    unsubscribe: () => {\r\n      if (subscription) {\r\n        clearInterval(subscription);\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nexport const iframeIsLoaded = (iframe: HTMLIFrameElement) => {\r\n  // its #document <html><head></head><body></body></html> when google is returning a 204\r\n  // so if contentDocument = null then it's loaded.\r\n  let isLoaded = false;\r\n  try {\r\n    if (!internetExplorer()) {\r\n      isLoaded = !iframe?.contentDocument;\r\n    } else {\r\n      isLoaded = !iframe?.contentWindow?.document;\r\n    }\r\n  } catch {\r\n    // ignore message Blocked a frame with origin \"http://...\" from accessing a cross-origin frame.\r\n  }\r\n  return isLoaded;\r\n}\r\n\r\nconst internetExplorer = () =>\r\n  (/MSIE (\\d+\\.\\d+);/.test(navigator.userAgent) || navigator.userAgent.indexOf(\"Trident/\") > -1);\r\n\r\nexport const getViewerDetails = (\r\n  url: string,\r\n  configuredViewer: ViewerType = 'google',\r\n  queryParams = '',\r\n  viewerUrl = ''\r\n) => {\r\n  switch (configuredViewer) {\r\n    case 'google':\r\n      viewerUrl = `https://docs.google.com/gview?url=%URL%&embedded=true`;\r\n      break;\r\n    case 'office': {\r\n      viewerUrl = `https://view.officeapps.live.com/op/embed.aspx?src=%URL%`;\r\n      break;\r\n    }\r\n    case 'pdf': {\r\n      viewerUrl = '';\r\n      break;\r\n    }\r\n  }\r\n  const externalViewer =\r\n    configuredViewer === 'google' ||\r\n    configuredViewer === 'office' ||\r\n    configuredViewer === 'url';\r\n\r\n  const u = url?.indexOf('/') ? encodeURIComponent(url) : url;\r\n  let fullUrl = viewerUrl ? viewerUrl.replace('%URL%', u) : url;\r\n  if (queryParams && externalViewer && configuredViewer !== 'url') {\r\n    const start = queryParams.startsWith('&') ? '' : '&';\r\n    fullUrl = `${fullUrl}${start}${queryParams}`;\r\n  }\r\n  return {\r\n    url: fullUrl,\r\n    externalViewer,\r\n  };\r\n};\r\n\r\nexport const replaceLocalUrl = (url: string, overrideLocalhost: string) => {\r\n  const loc = getLocation(url);\r\n  const locReplace = getLocation(overrideLocalhost);\r\n  if (loc && locReplace) {\r\n    return url.replace(loc.port ? `${loc.hostname}:${loc.port}` : loc.hostname,\r\n      locReplace.port ? `${locReplace.hostname}:${locReplace.port}` : locReplace.hostname);\r\n  }\r\n  return url;\r\n}\r\n\r\nconst getBlobFromUrl = (url: string) => {\r\n  return new Promise<File>((resolve, reject) => {\r\n    let request = new XMLHttpRequest();\r\n    request.open('GET', url, true);\r\n    request.responseType = 'blob';\r\n    request.onload = () => {\r\n      resolve(request.response as File);\r\n    };\r\n    request.onerror = reject;\r\n    request.send();\r\n  })\r\n}\r\n\r\n\r\nexport const uploadToCloud = (fileUrl: string, api: string) => new Promise((resolve, reject) => {\r\n  getBlobFromUrl(fileUrl).then(blob => {\r\n    const loc = getLocation(fileUrl);\r\n    const name = loc?.pathname ? loc?.pathname?.split('/')[loc?.pathname?.split('/').length - 1] : '';\r\n    const formData = new FormData();\r\n    const request = new XMLHttpRequest();\r\n    formData.append('file', blob, name);\r\n    request.onreadystatechange = e => {\r\n      if (request.readyState === XMLHttpRequest.DONE) {\r\n        if (request.status === 200) {\r\n          resolve(request.responseText);\r\n        } else {\r\n          reject(request.responseText);\r\n        }\r\n      }\r\n    };\r\n    request.onerror = reject;\r\n    request.open('post', api, true);\r\n    request.send(formData);\r\n  });\r\n});\r\n\r\nexport const isLocalFile = (file: string) => {\r\n  const loc = getLocation(file);\r\n  const hostname = loc?.hostname || '';\r\n  return (\r\n    (['localhost', '127.0.0.1', '', '::1'].includes(hostname))\r\n    || (hostname.startsWith('192.168.'))\r\n    || (hostname.startsWith('10.0.'))\r\n    || (hostname.endsWith('.local'))\r\n  )\r\n};","import {\r\n  Component,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  Output,\r\n  ViewChildren,\r\n  QueryList,\r\n  ElementRef,\r\n  AfterViewInit,\r\n} from '@angular/core';\r\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\r\nimport { EventEmitter } from '@angular/core';\r\n// eslint-disable-next-line @nrwl/nx/enforce-module-boundaries\r\nimport {\r\n  getDocxToHtml,\r\n  getViewerDetails,\r\n  googleCheckSubscription,\r\n  iframeIsLoaded,\r\n  isLocalFile,\r\n  replaceLocalUrl\r\n} from './../../../helper';\r\nimport {\r\n  IFrameReloader\r\n} from './../../../model';\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport type viewerType = 'google' | 'office' | 'mammoth' | 'pdf' | 'url';\r\n@Component({\r\n  // eslint-disable-next-line @angular-eslint/component-selector\r\n  selector: 'ngx-doc-viewer',\r\n  templateUrl: 'document-viewer.component.html',\r\n  styles: [\r\n    `\r\n      :host {\r\n        display: block;\r\n      }\r\n      .container {\r\n        width: 100%;\r\n        height: 100%;\r\n        position: relative;\r\n      }\r\n      .overlay-popout-google {\r\n        width: 40px;\r\n        height: 40px;\r\n        right: 26px;\r\n        top: 11.5px;\r\n        position: absolute;\r\n        z-index: 1000;\r\n      }\r\n      .overlay-popout-office {\r\n        width: 100px;\r\n        height: 20px;\r\n        right: 0;\r\n        bottom: 0;\r\n        position: absolute;\r\n        z-index: 1000;\r\n      }\r\n      .overlay-full {\r\n        width: 100%;\r\n        height: 100%;\r\n        right: 0;\r\n        top: 0;\r\n        position: absolute;\r\n        z-index: 1000;\r\n      }\r\n      iframe {\r\n        width: 100%;\r\n        height: 100%;\r\n      }\r\n    `,\r\n  ],\r\n})\r\nexport class NgxDocViewerComponent implements OnChanges, OnDestroy, AfterViewInit {\r\n  @Output() loaded: EventEmitter<void> = new EventEmitter();\r\n  @Input() url = '';\r\n  @Input() queryParams = '';\r\n  @Input() viewerUrl = '';\r\n  @Input() googleCheckInterval = 3000;\r\n  @Input() googleMaxChecks = 5;\r\n  @Input() disableContent: 'none' | 'all' | 'popout' | 'popout-hide' = 'none';\r\n  @Input() googleCheckContentLoaded = true;\r\n  @Input() viewer: viewerType;\r\n  @Input() overrideLocalhost: '';\r\n  @ViewChildren('iframe') iframes: QueryList<ElementRef>;\r\n\r\n  public fullUrl: SafeResourceUrl = null;\r\n  public externalViewer = false;\r\n  public docHtml = '';\r\n  public configuredViewer: viewerType = 'google';\r\n  private checkIFrameSubscription: IFrameReloader;\r\n  private shouldCheckIframe = false;\r\n\r\n  constructor(private domSanitizer: DomSanitizer, private ngZone: NgZone) { }\r\n\r\n  ngAfterViewInit(): void {\r\n    if (this.shouldCheckIframe) {\r\n      const iframe = this.iframes?.first\r\n        ?.nativeElement as HTMLIFrameElement;\r\n      if (iframe) {\r\n        this.shouldCheckIframe = false;\r\n        this.reloadIframe(iframe);\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.checkIFrameSubscription) {\r\n      this.checkIFrameSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  async ngOnChanges(changes: SimpleChanges): Promise<void> {\r\n    if (\r\n      changes &&\r\n      changes.viewer &&\r\n      (changes.viewer.isFirstChange ||\r\n        changes.viewer.currentValue !== changes.viewer.previousValue)\r\n    ) {\r\n      if (\r\n        this.viewer !== 'google' &&\r\n        this.viewer !== 'office' &&\r\n        this.viewer !== 'mammoth' &&\r\n        this.viewer !== 'pdf' &&\r\n        this.viewer !== 'url'\r\n      ) {\r\n        console.error(\r\n          `Unsupported viewer: '${this.viewer}'. Supported viewers: google, office, mammoth and pdf`\r\n        );\r\n      }\r\n      this.configuredViewer = this.viewer;\r\n    }\r\n\r\n    if (\r\n      (changes.url && changes.url.currentValue !== changes.url.previousValue) ||\r\n      (changes.viewer &&\r\n        changes.viewer.currentValue !== changes.viewer.previousValue) ||\r\n      (changes.viewerUrl &&\r\n        changes.viewerUrl.currentValue !== changes.viewerUrl.previousValue)\r\n    ) {\r\n      let viewerDetails = getViewerDetails(\r\n        this.url,\r\n        this.configuredViewer,\r\n        this.queryParams,\r\n        this.viewerUrl\r\n      );\r\n      this.externalViewer = viewerDetails.externalViewer;\r\n      if (viewerDetails.externalViewer && this.overrideLocalhost && isLocalFile(this.url)) {\r\n        const newUrl = replaceLocalUrl(this.url, this.overrideLocalhost);\r\n        viewerDetails = getViewerDetails(\r\n          newUrl,\r\n          this.configuredViewer,\r\n          this.queryParams,\r\n          this.viewerUrl\r\n        );\r\n      }\r\n      this.docHtml = '';\r\n      if (this.checkIFrameSubscription) {\r\n        this.checkIFrameSubscription.unsubscribe();\r\n      }\r\n      if (!this.url) {\r\n        this.fullUrl = null;\r\n      } else if (\r\n        viewerDetails.externalViewer ||\r\n        this.configuredViewer === 'url'\r\n      ) {\r\n        this.fullUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(\r\n          viewerDetails.url\r\n        );\r\n        // see:\r\n        // https://stackoverflow.com/questions/40414039/google-docs-viewer-returning-204-responses-no-longer-working-alternatives\r\n        // hack to reload iframe if it's not loaded.\r\n        // would maybe be better to use view.officeapps.live.com but seems not to work with sas token.\r\n        if (\r\n          this.configuredViewer === 'google' &&\r\n          this.googleCheckContentLoaded\r\n        ) {\r\n          this.ngZone.runOutsideAngular(() => {\r\n            // if it's not loaded after the googleIntervalCheck, then open load again.\r\n            const iframe = this.iframes?.first\r\n              ?.nativeElement as HTMLIFrameElement;\r\n            if (iframe) {\r\n              this.reloadIframe(iframe);\r\n            } else {\r\n              this.shouldCheckIframe = true;\r\n            }\r\n          });\r\n        }\r\n      } else if (this.configuredViewer === 'mammoth') {\r\n        this.docHtml = await getDocxToHtml(this.url);\r\n      }\r\n    }\r\n  }\r\n\r\n  private reloadIframe(iframe: HTMLIFrameElement) {\r\n    this.checkIFrameSubscription = googleCheckSubscription();\r\n    this.checkIFrameSubscription.subscribe(\r\n      iframe,\r\n      this.googleCheckInterval,\r\n      this.googleMaxChecks\r\n    );\r\n  }\r\n\r\n  iframeLoaded() {\r\n    const iframe = this.iframes?.first\r\n      ?.nativeElement as HTMLIFrameElement;\r\n    if (iframe && iframeIsLoaded(iframe)) {\r\n      this.loaded.emit(null);\r\n      if (this.checkIFrameSubscription) {\r\n        this.checkIFrameSubscription.unsubscribe();\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { NgxDocViewerComponent } from './document-viewer.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [NgxDocViewerComponent],\r\n  exports: [NgxDocViewerComponent],\r\n})\r\nexport class NgxDocViewerModule {}\r\n","export type ViewerType = 'google' | 'office' | 'mammoth' | 'pdf' | 'url';\r\n\r\ninterface Props {\r\n  loaded?: () => void;\r\n  url: string;\r\n  queryParams?: string;\r\n  viewerUrl?: string;\r\n  googleCheckInterval?: number;\r\n  disableContent?: 'none' | 'all' | 'poput' | 'popout-hide';\r\n  googleCheckContentLoaded?: boolean;\r\n  viewer?: ViewerType;\r\n}\r\n\r\nexport interface IFrameReloader {\r\n  subscribe: (\r\n    iframe: HTMLIFrameElement,\r\n    interval?: number,\r\n    maxChecks?: number\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  ) => any;\r\n  unsubscribe: () => void;\r\n}\r\n\r\nexport const defaultProps: Props = {\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  loaded: () => {},\r\n  disableContent: 'none',\r\n  googleCheckContentLoaded: true,\r\n  googleCheckInterval: 3000,\r\n  queryParams: '',\r\n  url: '',\r\n  viewer: 'google',\r\n  viewerUrl: '',\r\n};\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './ngx-doc-viewer-wrapper';\n"]},"metadata":{},"sourceType":"module"}